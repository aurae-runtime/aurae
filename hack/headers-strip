#!/usr/bin/env bash
# ---------------------------------------------------------------------------- #
#                |   █████╗ ██╗   ██╗██████╗  █████╗ ███████╗ |                #
#                |  ██╔══██╗██║   ██║██╔══██╗██╔══██╗██╔════╝ |                #
#                |  ███████║██║   ██║██████╔╝███████║█████╗   |                #
#                |  ██╔══██║██║   ██║██╔══██╗██╔══██║██╔══╝   |                #
#                |  ██║  ██║╚██████╔╝██║  ██║██║  ██║███████╗ |                #
#                |  ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝ |                #
#                +--------------------------------------------+                #
#                                                                              #
#                         Distributed Systems Runtime                          #
# ---------------------------------------------------------------------------- #
# Copyright 2022 - 2024, the aurae contributors                                #
# SPDX-License-Identifier: Apache-2.0                                          #
# ---------------------------------------------------------------------------- #
#
# strips SPDX headers from source and scripts

function info() {
	green='[0;32m'
	nc='[0m'
	printf "${green}%s${nc}
" "$1"
}

# This script assumes running from the top level directory within a Makefile
D=$(pwd)
if [[ $D == *"hack"* ]]; then
  echo ""
  echo "/hack is a special directory. These scripts should only be executed from the Makefile."
  echo "..or the directory above this one."
  echo ""
  exit 99
fi

# contains $SCRIPTS, $SOURCES, $EXPECTEDSOURCE, $EXPECTEDSCRIPT
. hack/file-definitions

# strip a header from a script file. use `/hack/file-definitions` to understand what files can be
# passed in
function strip_script_header() {
  local file="$1"
  local expected="$2"
  # Bypass files here
  if [ "$file" == "ignore.me" ]; then
      return
  fi

  # set header line length
  FIRST_LINE=$(head -n1 "$file")
  # account for scripts with shebangs
  if [ "$FIRST_LINE" = '#!/usr/bin/env bash' ]; then
      HEADER_LINES=30
      expected=$(printf "%s
%s" '#!/usr/bin/env bash' "$expected")
  else
      HEADER_LINES=29
  fi
  FILE_HEADER=$(head -n "$HEADER_LINES" "$file")
  if [ "$FILE_HEADER" = "$expected" ]; then
    info "  -> [MUTATING SOURCE FILE] Stripping header: $file"
    # strip the header from the source
    tail -n +$((HEADER_LINES + 1)) "$file" > "${file}.tmp" && mv "${file}.tmp" "$file"
    if [ "$HEADER_LINES" -eq 30 ]; then
      # readd shebang
      SRC=$(cat "$file")
      echo -e "#!/usr/bin/env bash
$SRC" > "${file}.tmp" && mv "${file}.tmp" "$file"
    fi
  else
    info "  -> [SKIPPING SOURCE FILE] $file"
    if [ "${SHOW_DEBUG:-0}" -gt 0 ] ; then
      info "File Header:"
      echo "$FILE_HEADER"
      info "Expected Header:"
      echo "$expected"
    fi
  fi
}

# simpler method of stripping headers for source that doesn't need to worry about shebang
function strip_source_header() {
  local file="$1"
  local expected="$2"
  # Bypass files here
  if [ "$file" == "ignore.me" ]; then
      return
  fi

  HEADER_LINES=29
  FILE_HEADER=$(head -n "$HEADER_LINES" "$file")
  if [ "$FILE_HEADER" = "$expected" ]; then
    info "  -> [MUTATING SOURCE FILE] Stripping header: $file"
    # strip the header from the source
    tail -n +$((HEADER_LINES + 1)) "$file" > "${file}.tmp" && mv "${file}.tmp" "$file"
  else
    info "  -> [SKIPPING SOURCE FILE] $file"
    if [ "${SHOW_DEBUG:-0}" -gt 0 ] ; then
      info "File Header:"
      echo "$FILE_HEADER"
      info "Expected Header:"
      echo "$expected"
    fi
  fi
}

FILE_ARG="$1"
if [ -f "$FILE_ARG" ] ; then
  strip_script_header "$FILE_ARG"
  exit "$?"
fi

EXPECTEDSCRIPT=$(echo "$EXPECTEDSCRIPT" | sed -E -e "s/Copyright © DATE/Copyright © $(date +%Y)/")
echo ""
echo " [ Stripping Scripts ] "
echo ""
for FILE in $SCRIPTS; do
  strip_script_header "$FILE" "$EXPECTEDSCRIPT"
done

echo ""
echo " [ Stripping Hack Scripts ] "
echo ""
for FILE in $HACKSCRIPTS; do
  strip_script_header "$FILE" "$EXPECTEDSCRIPT"
done

echo ""
echo " [ Stripping Source ] "
echo ""
for FILE in $SOURCES; do
  strip_source_header "$FILE" "$EXPECTEDSOURCE"
done
